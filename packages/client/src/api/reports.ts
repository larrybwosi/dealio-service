// hooks/useReports.ts
import { useQuery } from '@tanstack/react-query';
import { ReportType } from '@/prisma/client';
import { apiClient, useOrgStore } from '../tanstack-axios';

// Types
interface Report {
  id: string;
  organizationId: string;
  type: ReportType;
  data: any;
  summary: string | null;
  startDate: string;
  endDate: string;
  generatedAt: string;
  generatedById: string;
  organization: {
    id: string;
    name: string;
  };
  generatedBy: {
    id: string;
    name: string;
    email: string;
  };
}

interface ReportsResponse {
  data: Report[];
  pagination: {
    page: number;
    limit: number;
    totalCount: number;
    totalPages: number;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
  };
}

interface ReportsFilters {
  search?: string;
  type?: ReportType;
  startDate?: string;
  endDate?: string;
  generatedById?: string;
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
}

// API function
export const fetchReports = async (
  organizationId: string,
  filters: ReportsFilters = {}
): Promise<ReportsResponse> => {
  const params = new URLSearchParams();
  
  // Add filters to params
  Object.entries(filters).forEach(([key, value]) => {
    if (value !== undefined && value !== null && value !== '') {
      params.append(key, value.toString());
    }
  });

  const response = await apiClient.reports.sales(organizationId, params.toString());
  
  return response.data;
};

// TanStack Query hook
export const useReports = (
  filters: ReportsFilters = {},
  options: {
    enabled?: boolean;
    staleTime?: number;
    cacheTime?: number;
    refetchOnWindowFocus?: boolean;
  } = {}
) => {
  const organizationId = useOrgStore(state => state.organizationId);
  return useQuery({
    queryKey: ['reports', organizationId, filters],
    queryFn: () => fetchReports(organizationId!, filters),
    enabled: options.enabled ?? !!organizationId,
    staleTime: options.staleTime ?? 5 * 60 * 1000, // 5 minutes
    gcTime: options.cacheTime ?? 10 * 60 * 1000, // 10 minutes
    refetchOnWindowFocus: options.refetchOnWindowFocus ?? false,
  });
};

// Usage example in a component:
/*
import { useReports } from '@/hooks/useReports';

const ReportsPage = ({ organizationId }: { organizationId: string }) => {
  const [filters, setFilters] = useState<ReportsFilters>({
    page: 1,
    limit: 10,
    sortBy: 'generatedAt',
    sortOrder: 'desc',
  });

  const { 
    data: reportsData, 
    isLoading, 
    isError, 
    error,
    refetch 
  } = useReports(organizationId, filters);

  if (isLoading) return <div>Loading...</div>;
  if (isError) return <div>Error: {error.message}</div>;

  return (
    <div>
      <h1>Reports</h1>
      {reportsData?.data.map(report => (
        <div key={report.id}>
          <h3>{report.type}</h3>
          <p>{report.summary}</p>
          <p>Generated by: {report.generatedBy.name}</p>
          <p>Date: {new Date(report.generatedAt).toLocaleDateString()}</p>
        </div>
      ))}
      
      <div>
        <button 
          disabled={!reportsData?.pagination.hasPreviousPage}
          onClick={() => setFilters(prev => ({ ...prev, page: prev.page! - 1 }))}
        >
          Previous
        </button>
        <span>
          Page {reportsData?.pagination.page} of {reportsData?.pagination.totalPages}
        </span>
        <button 
          disabled={!reportsData?.pagination.hasNextPage}
          onClick={() => setFilters(prev => ({ ...prev, page: prev.page! + 1 }))}
        >
          Next
        </button>
      </div>
    </div>
  );
};
*/